// Copyright 2022 Open Reaction Database Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Schema for the cleaned database from ORD.
syntax = "proto3";

package ord_new;

// This new schema is a work in progress and it is not yet ready for use.
// Main code were taken from ord-schema/ord_schema/proto/reaction.proto
// (https://github.com/open-reaction-database/ord-schema/blob/main/ord_schema/proto/reaction.proto)

message Reaction {
  // repeated ReactionIdentifier identifiers = 1;
  // List of pure substances or mixtures that were added to the reaction vessel.
  // This is a map instead of a repeated field to simplify reaction templating
  // through the use of keys. String keys are simple descriptions and are
  // present only for convenience.
  map<string, ReactionInput> inputs = 2;
  // The reaction setup specifies how the reaction was prepared, e.g., whether
  // it was automated, whether it was run in a glove box.
  ReactionSetup setup = 3;
  // Reaction conditions predominantly include temperature, stirring, and
  // pressure conditions, but also allow specification of flow, photochemistry,
  // and electrochemistry conditions.
  ReactionConditions conditions = 4;
  // Each reaction outcome contains all analyses and confirmed/expected product
  // structures at a particular reaction time.
  repeated ReactionOutcome outcomes = 8;
  // Provenance contains details of the experimenter and record writer.
  ReactionProvenance provenance = 9;
  // Official ID for this reaction in the Open Reaction Database.
  string reaction_id = 10;
}

/**
 * A reaction input is any pure substance, mixture, or solution that is
 * added to the reaction vessel.
 *
 * For example, suppose we are adding 3 mL of a 4 M solution of NaOH in water.
 * We would define one component for the solvent and one component for the
 * solute with the correct respective amounts.
 *
 * input {
 *   components: {
 *     identifiers: {type: IDENTIFIER_SMILES, value: "O"}
 *     identifiers: {type: IDENTIFIER_NAME, value: "water"}
 *     volume: {value: 3, units: MILLILITER}
 *     volume_includes_solutes: true
 *   }
 *   components: {
 *     identifiers: {type: IDENTIFIER_SMILES, value: "[Na+].[OH-]"}
 *     identifiers: {type: IDENTIFIER_NAME, value: "sodium hydroxide"}
 *     moles: {value: 12, units: MILLIMOLES}
 *   }
 * }
 */

message ReactionInput {
  // A component is any pure species that is added to the reaction, whether as
  // a pure substance or in a mixture/solution.
  repeated Compound components = 1;
  // A crude component refers to a non-purified, non-isolated compound or
  // mixture that is produced by a preceding reaction step.
  repeated CrudeComponent crude_components = 2;
  // The addition order is 1-indexed. Inputs with the same addition_order are
  // assumed to be added simultaneously. One input with a lower addition_order
  // than another was added earlier in the procedure.

  // Specify the temperature of the material being added.
  // E.g., a cooled flask of a stock solution to be added at low temperature.
  Temperature addition_temperature = 9;
}

/**
 * The quantitative amount of a Compound used in a particular reaction.
 * Compounds added in their pure form should have their value defined by
 * mass, moles, or volume. Compounds prepared as solutions should be defined
 * in terms of their volume. Compounds prepared on solid supports should
 * define the total mass/volume including the support.
 */
message Amount {
  oneof kind {
    Mass mass = 1;
    Moles moles = 2;
    Volume volume = 3;
    UnmeasuredAmount unmeasured = 5;
  }
  // Whether the volume measurement refers to the pure substance or to the
  // total volume of the reaction input. An example of when this field should
  // be TRUE is when stock solutions are prepared by adding solvent to a
  // volumetric flask already containing solute(s).
  // I don't think we need this?
  optional bool volume_includes_solutes = 4;
}

/**
 * Compounds may be defined with qualitative amounts in situations where a
 * precise quantity is not measured or reported.
 */
message UnmeasuredAmount {
  enum UnmeasuredAmountType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    // Solute species present at saturation limit. Should only be used for
    // compounds when a solvent compound is also present in he same input.
    SATURATED = 2;
    // An unmeasured drop or scoop of compound intended to introduce it only
    // at a catalytic (very low) concentration.
    CATALYTIC = 3;
    // Compound was titrated in, but the actual amount added was not recorded.
    // Details of how the amount of compound added was decided, e.g., a change
    // in color, should be included in the details field.
    TITRATED = 4;
  }
  UnmeasuredAmountType type = 1;
  // Full description of the unmeasured amount if more details are known.
  string details = 2;
}

/**
 * Crude components are used in multi-step or multi-stage reactions (no strong
 * distinction is made here) where one synthetic process must be described by
 * multiple "Reaction" messages. In these cases, we often carry the crude
 * product from one step/stage into the next. This message is only to be used
 * when there is not complete isolation of an intermediate molecule; if there
 * is complete isolation, then a regular Compound should be used with the
 * SYNTHESIED preparation type.
 */
message CrudeComponent {
  // The ID of the reaction that produced the crude. Note that this ID must be
  // defined within the same Dataset; cross-references cannot exist between
  // multiple datasets.
  string reaction_id = 1;
  // Whether that reaction's workup and purification steps were performed
  // prior to addition.
  optional bool includes_workup = 2;
  // Whether the amount added in this reaction should be inferred from the
  // previous step, i.e, if everything was added.
  optional bool has_derived_amount = 3;
  // If the entire crude mixture was not used, need to specify an amount.
  Amount amount = 4;
}

/**
 * A Compound defines both the identity of a pure species and a quantitative
 * amount (mass, moles, volume). For compounds used in inputs, details can
 * be provided about how it was prepared and from where it was purchased.
 */
message Compound {
  // Set of identifiers used to uniquely define this compound.
  // Solutions or mixed compounds should use the NAME identifier
  // and list all constituent compounds in the "components" field.
  repeated CompoundIdentifier identifiers = 1;
  Amount amount = 2;
  ReactionRole.ReactionRoleType reaction_role = 3;
  // Whether this species is intended to be a limiting reactant.
  optional bool is_limiting = 4;
  // Compounds may be assayed for quality control; analytical data should be
  // defined in the analyses map.
  map<string, Analysis> analyses = 8;
}

message ReactionRole {
  enum ReactionRoleType {
    UNSPECIFIED = 0;
    // A reactant is any compound that contributes atoms to a desired or
    // observed product.
    REACTANT = 1;
    REAGENT = 2;
    SOLVENT = 3;
    CATALYST = 4;
    // The workup role is used when defining quenches, buffer additives for
    // liquid-liquid separations, etc.
    WORKUP = 5;
    // Internal standards can be included as part of a reaction input (when
    // added prior to the start of the reaction) or as part of a workup
    // step of addition.
    INTERNAL_STANDARD = 6;
    AUTHENTIC_STANDARD = 7;
    // A product can be any species produced by the reaction, whether desired
    // or undesired.
    PRODUCT = 8;
  }
}

/**
 * Compound identifiers uniquely define a single (pure) chemical species.
 * While we encourage the use of SMILES strings, these do not work well in
 * all cases (e.g., handling tautomerism, axial chirality). Multiple
 * identifiers may be specified for a single compound to avoid ambiguity.
 * We discourage chemicals from being defined only by a name. For compounds
 * that are prepared or isolated as salts, the identifier should include
 * specification of which salt.
 */
// SMILES is the most common identifier for a compound
// SMILES is enough?
message CompoundIdentifier {
  enum IdentifierType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    // Simplified molecular-input line-entry system.
    SMILES = 2;
    // IUPAC International Chemical Identifier.
    INCHI = 3;
    // Molblock from a MDL Molfile V3000.
    MOLBLOCK = 4;
    // Chemical name following IUPAC nomenclature recommendations.
    IUPAC_NAME = 5;
    // Any accepted common name, trade name, etc.
    NAME = 6;
    // Chemical Abstracts Service Registry Number (with hyphens).
    CAS_NUMBER = 7;
    // PubChem Compound ID number.
    PUBCHEM_CID = 8;
    // ChemSpider ID number.
    CHEMSPIDER_ID = 9;
    // ChemAxon extended SMILES
    CXSMILES = 10;
    // IUPAC International Chemical Identifier key
    INCHI_KEY = 11;
    // XYZ molecule file
    XYZ = 12;
    // UniProt ID (for enzymes)
    UNIPROT_ID = 13;
    // Protein data bank ID (for enzymes)
    PDB_ID = 14;
    // Amino acid sequence (for enzymes).
    AMINO_ACID_SEQUENCE = 15;
    // HELM; https://www.pistoiaalliance.org/helm-notation/.
    HELM = 16;
  }
  IdentifierType type = 1;
  string details = 2;
  // Value of the compound identifier; certain types (e.g., PUBCHEM_CID) may
  // cast the string as an integer for downstream processing and validation.
  string value = 3;
}

message ReactionSetup {
  // Specification of automated protocols.
  optional bool is_automated = 2;
  // Automated platform name, brand, or model number.
  string automation_platform = 3;
  // Raw automation code or synthetic recipe definition.
  map<string, Data> automation_code = 4;
  message ReactionEnvironment {
    enum ReactionEnvironmentType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      FUME_HOOD = 2;
      BENCH_TOP = 3;
      GLOVE_BOX = 4;
      GLOVE_BAG = 5;
    }
    ReactionEnvironmentType type = 1;
    // Specify environment details, e.g., "nitrogen-filled" for GLOVE_BOX.
    string details = 2;
  }
  // Specify reaction environment.
  ReactionEnvironment environment = 5;
}

message ReactionConditions {
  bool need_illumination = 1;
}

/**
 * The outcomes of a reaction describe the conversion, yield, and/or other
 * analyses of the resulting product mixture after workup step(s). Each
 * outcome is associated with a reaction/residence time. To allow for
 * one Reaction message to contain the results of a full kinetic profiling
 * experiment, this is a repeated field of the Reaction message.
 *
 * It is the parent message for product characterization and any analytical
 * data.
 */
message ReactionOutcome {
  // Reaction time (for flow, equivalent to residence time or spacetime).
  Time reaction_time = 1;
  // Conversion with respect to the sole limiting reactant. If there is
  // ambiguity in which species the conversion is defined with respect to, the
  // quantification of leftover starting materials should be defined as the
  // quantification of multiple products, where the compound identity of those
  // products matches the starting materials.
  Percentage conversion = 2;
  // The products observed in this reaction, including product-specific data
  // defined in submessages. If the quantities of leftover starting materials
  // are measured, these starting materials may also be defined as product
  // species.
  // todo: split repeated product into products separately
  repeated ProductCompound products = 3;
  // Analyses are stored in a map to associate each with a unique key.
  // The key is cross-referenced in ProductCompound's ProductMeasurement
  // messages to indicate which analyses were used to derive which performance
  // values/metrics. The string used for the key carries no meaning outside of
  // this cross-referencing.
  map<string, Analysis> analyses = 4;
}

message ProductCompound {
  // The identity of the product compound.
  repeated CompoundIdentifier identifiers = 1;
  // Each ProductMeasurement describes a connection between this product and an
  // Analysis. This includes information about how the identity of the
  // product was confirmed. It also contains quantitative standardized
  // performance metrics like quantitative yield as well as unstandardized
  // (and unnormalized) metrics like an integrated UV peak area.
  repeated ProductMeasurement measurements = 3;
  // Specify the role the ProductCompound played in the reaction. This
  // aids in constructing proper reaction SMILES and product lists.
  // Species produced by the reaction should be identified as PRODUCT,
  // whether desired or undesired. Recovered starting materials can be
  // specified as REACTANT, REAGENT, CATALYST, etc. as appropriate.
  ReactionRole.ReactionRoleType reaction_role = 7;
}

message ProductMeasurement {
  // The key of the analysis used to calculate this product-specific
  // measurement; this should cross-reference the outcome.analyses map.
  string analysis_key = 1;
  // The type of measurement. While each measurement is associated with a
  // specific product compound and is cross-referenced to an analysis through
  // the analysis_key, there is still ambiguity as to what a measurement
  // truly represents. For example, an LCMS analysis can lead to a quantitative
  // YIELD if an authentic standard and internal standard are used to obtain
  // a calibration curve; sometimes, it is only used to obtain an uncalibrated
  // "yield" that is better described as an peak AREA or integrated EIC
  // COUNTS. Understanding the fidelity of the approach taken to measure
  // the performance of a reaction is important for downstream learning tasks.
  // Note that this message is intended to capture product-specific data
  // extracted from an analysis. The raw analytical data (e.g., a full NMR
  // spectrum) should be defined in an Analysis message. Even analyses
  // of ostensibly pure compounds (e.g., HRMS) should have their results
  // defined in the Analysis message (with is_of_isolated_species set
  // to True) but with a cross-reference to a product via a ProductMessage
  // (e.g., of type IDENTITY for HRMS).
  enum MeasurementType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    // An identity type indicates that the corresponding analysis was used
    // to confirm the identity of the reported product.
    IDENTITY = 2;
    // Yields should only be reported as quantitative yields, e.g., measured
    // using an isolated weight analysis, quantitative NMR with an internal
    // standard, LC peak area with an internal standard and calibration curve
    // obtained using an authentic standard.
    YIELD = 3;
    // Selectivites include enantiomeric excess/ratios, diastereomeric ratios,
    // etc. The detailed type should be specified in selectivity_type.
    SELECTIVITY = 4;
    // The apparent purity of the product mixture accoridng to a specific
    // analysis (e.g,. qNMR, LC).
    PURITY = 5;
    // Integrated peak area, e.g., as in an LC chromatogram.
    AREA = 6;
    // Raw counts, e.g., as in an EIC or TIC from a MS analysis. If an EIC,
    // the m/z ratio(s) should be defined in the details.
    COUNTS = 7;
    // Intensity, e.g., of a TLC spot, ELSD, or GC FID.
    INTENSITY = 8;
    // Quantitative amount of this product as defined in the "amount" field,
    // usually as a mass.
    AMOUNT = 9;
  }
  MeasurementType type = 2;
  // Additional information about the measurement and, in particular, how it
  // was calculated if that is ambiguous given the analysis type.
  string details = 3;
  // Whether an internal standard was used for this measurement to normalize
  // it, e.g., for quantification of yield or relative peak area.
  optional bool uses_internal_standard = 4;
  // Whether the reported measurement has already been normalized to the
  // internal standard, if an internal standard was used.
  optional bool is_normalized = 5;
  // Whether an authentic sample of a material was used for callibrating
  // an analytical technique, e.g., for product identification by LCMS.
  // "Authentic" refers to a sample of a compound whose structure has been
  // proven by the accepted means (1H NMR, 13C NMR, IR, HRMS), and is now
  // being used as a comparison for other analytical methods.
  optional bool uses_authentic_standard = 6;
  // Details about the authentic standard used, optionally including
  // information about its precise salt form and source/vendor.
  Compound authentic_standard = 7;
  // The value for this measurement.
  oneof value {
    // A percentage value and its precision, as should be used for yields,
    // purities, and some selectivities like EE. Note that a 50% yield
    // corresponds to a percentage.value of 50 and not 0.5.
    Percentage percentage = 8;
    // A float value and its precision, as should be used for areas, counts,
    // intensities, and some selectivities.
    FloatValue float_value = 9;
    // A string value, as should be used for measurements that cannot be
    // captured as floats or percentages. For example, complex selectivities
    // such as "2:1:1". Note that in the case of a 2:1:1 selectivity, however,
    // it is preferable to define the 3 distinct products specifically and
    // record the 3 product-specific measurements (e.g., peak areas) that
    // were used to derive the "2:1:1" summary statistic.
    string string_value = 10;
    // Quantitative amount of this product. Measurements of this type should
    // be linked to an analysis of type WEIGHT. Separate ProductMeasurement
    // entries should be used to capture multiple amounts, such as mass and
    // moles. However, since moles is derived from mass, recording just the
    // mass is fine.
    Amount amount = 11;
  }
  // A time to be used only when specifying the retention time at which a peak
  // area or intensity was calculated, e.g., as in LC, LCMS, GC, or GCMS.
  Time retention_time = 12;
  // More details about how a particular performance metric (e.g., counts)
  // was calculated from an analysis using mass spec. This includes
  // distinguishing total ion current (TIC) counts from extracted ion
  // chromatogram (EIC) counts and their corresponding mass ranges or masses.
  message MassSpecMeasurementDetails {
    enum MassSpecMeasurementType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      TIC = 2;
      TIC_POSITIVE = 3;
      TIC_NEGATIVE = 4;
      EIC = 5;
    }
    MassSpecMeasurementType type = 1;
    string details = 2;
    // The lower bound of the m/z interval used to calculate the TIC counts.
    optional float tic_minimum_mz = 3;
    // The upper bound of the m/z interval used to calculate the TIC counts.
    optional float tic_maximum_mz = 4;
    // A list of m/z ratios that were used to calculate the peak area or
    // intensity from an extracted ion chromatogram (EIC), e.g., from an LCMS
    // analysis.
    repeated float eic_masses = 5;
  }
  MassSpecMeasurementDetails mass_spec_details = 13;

  // The more specific type of selectivity that is being reported, e.g., EE,
  // ER, DR, EZ, ZE. EZ, ER, and DR assume that any product labeled as desired
  // is first in the calculation, whereas EZ and ZE ratios are calculated as
  // written. Only to be used when the type is SELECTIVITY.
  message Selectivity {
    enum SelectivityType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      EE = 2;  // Enantiomeric excess as a percentage (desired - undesired).
      ER = 3;  // Enantiomeric ratio. (x:1) (desired / undesired).
      DR = 4;  // Diasteromeric ratio. (x:1) (desired / undesired).
      EZ = 5;  // Alkene geometry ratio. (x:1) (E / Z)
      ZE = 6;  // Alkene geometry ratio. (x:1) (Z / E)
    }
    SelectivityType type = 1;
    string details = 2;
  }
  Selectivity selectivity = 14;

  // The wavelength used for e.g. LC quantification.
  Wavelength wavelength = 15;
}

message DateTime {
  string value = 1;
}

message Analysis {
  // TODO(ccoley): Solicit more feedback from experimentalists
  enum AnalysisType {
    // todo: merge things together for different types of analysis
    UNSPECIFIED = 0;
    CUSTOM = 1;
    LC = 2;  // Liquid chromatography, including HPLC and UPLC.
    GC = 3;  // Gas chromatography.
    IR = 4;  // Infrared spectroscopy, including ReactIR.
    NMR_1H = 5;  // 1H NMR spectroscopy.
    NMR_13C = 6;  // 13C NMR spectroscopy.
    NMR_OTHER = 7;  // Specify type and details in "details".
    MP = 8;  // Melting point characterization.
    UV = 9;  // Ultraviolet spectroscopy.
    TLC = 10;  // Thin-layer chromatography.
    MS = 11;  // Mass spectrometry.
    HRMS = 12;  // High resolution mass spectrometry.
    MSMS = 13;  // Two-dimensional mass spectrometry.
    WEIGHT = 14;  // Weight of an isolated compound.
    LCMS = 15;  // Combined LC/MS.
    GCMS = 16;  // Combined GC/MS.
    ELSD = 17;  // Evaporative light scattering detector.
    CD = 18;  // Circular Dichroism.
    SFC = 19;  // Supercritical fluid chromatography.
    EPR = 20;  // Electron paramagnetic resonance spectroscopy.
    XRD = 21;  // X-ray diffraction, including single-crystal XRD.
    RAMAN = 22;  // Raman spectroscopy.
    ED = 23;  // Electron diffraction, including MicroED.
  }
  AnalysisType type = 1;
  // Any details about analysis (e.g., NMR type, columns, gradients).
  string details = 2;
  // Whether this analysis is intended to be of an isolated species. If false
  // RSC Chemical Methods Ontology ID to define the analytical method with
  // greater specificity. Defined at https://github.com/rsc-ontologies/rsc-cmo.
  int32 chmo_id = 3;
  // or unspecified, the assumption is that it is of a crude product mixture
  // (or a partially worked-up product mixture).
  optional bool is_of_isolated_species = 4;
  // Data values or files (raw, processed, or annotated).
  map<string, Data> data = 5;
  string instrument_manufacturer = 6;
  DateTime instrument_last_calibrated = 7;
}

message ReactionProvenance {
  DateTime experiment_start = 3;
  string doi = 4;
  string patent = 5;
  RecordEvent record_created = 7;
  repeated RecordEvent record_modified = 8;
}

message RecordEvent {
  DateTime time = 1;
}

/**
 * To allow users to describe synthetic processes in whatever units they find
 * most natural, we define a fixed list of allowable units for each measurement
 * type. Upon submission to a centralized database, or using a validation and
 * canonicalization script, we will convert all values to the default units
 * (the first nonzero item in each enum).
 *
 * Each message also contains a `precision` field, which specifies the precision
 * of the measurement in the same units as the measurement itself. Often the
 * precision will be the standard deviation from an instrument calibration.
 */
message Time {
  enum TimeUnit {
    UNSPECIFIED = 0;
    DAY = 4;
    HOUR = 1;
    MINUTE = 2;
    SECOND = 3;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  TimeUnit units = 3;
}
message Mass {
  enum MassUnit {
    UNSPECIFIED = 0;
    KILOGRAM = 1;
    GRAM = 2;
    MILLIGRAM = 3;
    MICROGRAM = 4;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  MassUnit units = 3;
}
message Moles {
  enum MolesUnit {
    UNSPECIFIED = 0;
    MOLE = 1;
    MILLIMOLE = 2;
    MICROMOLE = 3;
    NANOMOLE = 4;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  MolesUnit units = 3;
}
message Volume {
  enum VolumeUnit {
    UNSPECIFIED = 0;
    LITER = 1;
    MILLILITER = 2;
    MICROLITER = 3;
    NANOLITER = 4;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  VolumeUnit units = 3;
}
message Concentration {
  enum ConcentrationUnit {
    UNSPECIFIED = 0;
    MOLAR = 1;
    MILLIMOLAR = 2;
    MICROMOLAR = 3;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  ConcentrationUnit units = 3;
}
message Pressure {
  enum PressureUnit {
    UNSPECIFIED = 0;
    BAR = 1;
    ATMOSPHERE = 2;
    PSI = 3;
    KPSI = 4;
    PASCAL = 5;
    KILOPASCAL = 6;
    TORR = 7;
    MM_HG = 8;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  PressureUnit units = 3;
}
message Temperature {
  enum TemperatureUnit {
    UNSPECIFIED = 0;
    CELSIUS = 1;
    FAHRENHEIT = 2;
    KELVIN = 3;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  TemperatureUnit units = 3;
}
message Current {
  enum CurrentUnit {
    UNSPECIFIED = 0;
    AMPERE = 1;
    MILLIAMPERE = 2;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  CurrentUnit units = 3;
}
message Voltage {
  enum VoltageUnit {
    UNSPECIFIED = 0;
    VOLT = 1;
    MILLIVOLT = 2;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  VoltageUnit units = 3;
}
message Length {
  enum LengthUnit {
    UNSPECIFIED = 0;
    CENTIMETER = 1;
    MILLIMETER = 2;
    METER = 3;
    INCH = 4;
    FOOT = 5;
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  LengthUnit units = 3;
}
message Wavelength {
  enum WavelengthUnit {
    UNSPECIFIED = 0;
    NANOMETER = 1;
    WAVENUMBER = 2;  // cm^{-1}
  }
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
  WavelengthUnit units = 3;
}

// Used for things like conversion and yield.
message Percentage {
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
}
// Wrapper for floats to include a precision.
message FloatValue {
  optional float value = 1;
  // Precision of the measurement (with the same units as `value`).
  optional float precision = 2;
}

// Data is a container for arbitrary data.
message Data {
  oneof kind {
    float float_value = 1;
    int32 integer_value = 2;
    bytes bytes_value = 3;
    string string_value = 4;
    string url = 5;  // URL for data stored elsewhere.
  }
  // Description of these data (but avoid redundancy with map keys).
  string description = 6;
  // Description of the file format (if applicable); usually the file extension.
  // For example, 'png' or 'tiff' for images. If empty, we assume string data.
  string format = 7;
}
